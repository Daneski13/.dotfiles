#!/usr/bin/env python3
# prints the leaf process of a tmux window to
# stdout given the tmux pane pid

import psutil
import sys


# The maximum depth to search for a leaf process
MAX_DEPTH = 2


def glyphize(process_name: str) -> str:
    """ Glyphs for common processes """
    glyph: str | None = None

    # Shells
    SHELLS = ["sh", "zsh", "bash", "fish", "csh", "tcsh", "ksh", "dash"]
    if process_name in SHELLS:
        glyph = ""

    # Editors
    elif process_name == "vim" or process_name == "nvim":
        glyph = ""
    elif process_name == "emacs":
        glyph = ""

    # Language runtimes
    elif process_name.startswith("python"):
        glyph = ""
    elif process_name == "node":
        glyph = ""
    elif process_name == "ruby":
        glyph = ""
    elif process_name == "java":
        glyph = ""
    elif process_name in ["rust", "cargo", "rustc"]:
        glyph = ""

    # Git
    elif process_name == "gh" or process_name.startswith("git"):
        glyph = ""

    # Less / pager
    elif process_name == "less":
        glyph = "󰗚"

    # Docker
    elif process_name == "docker":
        glyph = "󰡨"

    # Pad the glpyh with a space if it exists
    glyph = f"{glyph} " if glyph else ""

    return f"{glyph}{process_name}"


# Get the process
process = psutil.Process(int(sys.argv[1]))

for _ in range(MAX_DEPTH):
    num_children = len(process.children())
    # May seem odd that a process with more than 1 children is considered a leaf,
    # but this is because you probably actually want the the lowest "root" process.
    # ex. neovim with a bunch of plugins will probably have severa child processes
    # but you probably only care about the neovim process.
    if num_children == 0 or num_children > 1:
        break
    else:
        process = process.children()[0]

name = process.name()
print(glyphize(name))
